/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height(TreeNode* root){
        if(root==NULL){
            return 0;
        }
        return 1+max(height(root->left),height(root->right));
    }
    int deepestLeavesSum(TreeNode* root) {
        queue<TreeNode*> q1;
        queue<TreeNode*> q2;
        q1.push(root);
        int h=height(root);
        int i=1;
        while(i<h-1){
            while(!q1.empty()){
                TreeNode*curr=q1.front();
                q1.pop();
                if(curr->left!=NULL){
                    q2.push(curr->left);
                }
                if(curr->right!=NULL){
                    q2.push(curr->right);
                }
            }
            i++;
            while(!q2.empty()&&i<h-1){
                TreeNode*curr=q2.front();
                q2.pop();
                if(curr->left!=NULL){
                    q1.push(curr->left);
                }
                if(curr->right!=NULL){
                    q1.push(curr->right);
                }
            }
            i++;
        }
        int sum=0;
        while(!q1.empty()){
            TreeNode*curr=q1.front();
            q1.pop();
            if(curr->left!=NULL){
                q2.push(curr->left);
                sum+=curr->left->val;
            }
            if(curr->right!=NULL){
                q2.push(curr->right);
                sum+=curr->right->val;
            }
        }
        while(!q2.empty()){
            TreeNode*curr=q2.front();
            q2.pop();
            if(curr->left!=NULL){
                q1.push(curr->left);
                sum+=curr->left->val;
            }
            if(curr->right!=NULL){
                q1.push(curr->right);
                sum+=curr->right->val;
            }
        }
        return sum;
    }
};