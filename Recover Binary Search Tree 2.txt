/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

void inorder(TreeNode* A,vector<int>& v){
    if(!A){
        return;
    }
    inorder(A->left,v);
    v.push_back(A->val);
    inorder(A->right,v);
}
vector<int> Solution::recoverTree(TreeNode* A) {
    vector<int> v;
    inorder(A,v);
    vector<int> a;
    int x=0;
    for(int i=1;i<v.size();i++){
        if(v[i-1]>v[i]&&x==0){
            a.push_back(v[i-1]);
            a.push_back(v[i]);
            x=1;
        }
        if(v[i-1]>v[i]&&x==1){
            a.pop_back();
            a.push_back(v[i]);
        }
    }
    reverse(a.begin(),a.end());
    return a;
}
