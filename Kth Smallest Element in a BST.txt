/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right; 
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // void helper(TreeNode* root,priority_queue<int,vector<int>,greater<int>>& pq){
    //     if(!root){
    //         return;
    //     }
    //     pq.push(root->val);
    //     helper(root->left,pq);
    //     helper(root->right,pq);
    // }
    void inorderTraversal(TreeNode* root,vector<int>& inorder){
        if(!root){
            return;
        }
        inorderTraversal(root->left,inorder);
        inorder.push_back(root->val);
        inorderTraversal(root->right,inorder);
    }
    int kthSmallest(TreeNode* root, int k) {
        vector<int> inorder;
        inorderTraversal(root,inorder);
        return inorder[k-1];
    }
        
    //     priority_queue<int,vector<int>,greater<int>> pq;
    //     helper(root,pq);
    //     while(k>1){
    //         pq.pop();
    //         k--;
    //     }
    //     return pq.top();
    // }
};
