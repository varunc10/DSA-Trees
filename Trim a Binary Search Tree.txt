/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // TreeNode* FindMin(TreeNode* root){
    //     while(root->left!=NULL){
    //         root=root->left;
    //     }
    //     return root;
    // }
    // TreeNode* delBST(TreeNode* root,int x){
    //     if(!root){
    //         return root;
    //     }
    //     else if(root->val>x){
    //         root->left=delBST(root->left,x);
    //     }
    //     else if(root->val<x){
    //         root->right=delBST(root->right,x);
    //     }
    //     // found the node to be deleted
    //     else{
    //         //no children
    //         if(!root->left&&!root->right){
    //             delete root;
    //             return NULL;
    //         }
    //         //one child
    //         else if(!root->left){
    //             TreeNode* temp=root;
    //             root=root->right;
    //             delete temp;
    //             return root;
    //         }
    //         else if(!root->right){
    //             TreeNode* temp=root;
    //             root=root->left;
    //             delete temp;
    //             return root;
    //         }
    //         //two children
    //         else{
    //             TreeNode* temp=FindMin(root->right);
    //             root->val=temp->val;
    //             root->right=delBST(root->right,temp->val);
    //         }
    //     }
    //     return root;
    // }
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if(!root){
            return root;
        }
        else if(root->val<low){
            return trimBST(root->right,low,high);
        }
        else if(root->val>high){
            return trimBST(root->left,low,high);
        }
        root->left=trimBST(root->left,low,high);
        root->right=trimBST(root->right,low,high);
        return root;
    }
};